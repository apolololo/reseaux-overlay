
/**
 * Middleware de s√©curit√© pour les overlays d'APO
 * V√©rifie les tokens d'acc√®s et prot√®ge les ressources
 */

/**
 * V√©rifie si l'utilisateur est authentifi√©
 * @returns {boolean} true si l'utilisateur est authentifi√©, sinon false
 */
export function isAuthenticated() {
  const token = localStorage.getItem('twitch_token');
  const expiresAt = localStorage.getItem('twitch_expires_at');
  return token && expiresAt && new Date().getTime() < parseInt(expiresAt);
}

/**
 * V√©rifie si le token d'acc√®s est valide pour un chemin d'overlay
 * @param {string} token - Le token d'acc√®s encod√© en base64
 * @param {string} path - Le chemin d'acc√®s √† l'overlay
 * @returns {boolean} true si le token est valide pour ce chemin
 */
export function validateOverlayToken(token, path) {
  try {
    if (!token) return false;
    
    // Param√®tres d'URL pour le d√©bogage
    const params = new URLSearchParams(window.location.search);
    const DEBUG = params.get('debug') === '1';
    
    // Decoder le token
    const decodedData = atob(token);
    const separatorIndex = decodedData.indexOf('-');
    
    if (separatorIndex === -1) {
      if (DEBUG) console.log('Format de token invalide, pas de s√©parateur trouv√©');
      return false;
    }
    
    // Extraire le chemin du token
    let overlayPath = decodedData.substring(separatorIndex + 1);
    
    // AM√âLIORATION: Normalisation rigoureuse des chemins
    // Normaliser les chemins pour la comparaison
    if (!overlayPath.startsWith('/')) {
      overlayPath = '/' + overlayPath;
    }
    
    if (!path.startsWith('/')) {
      path = '/' + path;
    }
    
    // D√©tection de l'environnement de production
    const isProduction = !window.location.hostname.includes('localhost') && 
                         !window.location.hostname.includes('127.0.0.1');
                         
    // Normalisation des chemins en fonction de l'environnement
    if (isProduction) {
      // Supprimer le pr√©fixe 'src/' pour tous les chemins en production
      overlayPath = overlayPath.replace(/^\/src\//, '/');
      path = path.replace(/^\/src\//, '/');
    }
    
    // Nettoyer les chemins pour une meilleure correspondance
    const cleanPath = (p) => p.replace(/\.html$/, '').replace(/\/$/, '');
    const normalizedTokenPath = cleanPath(overlayPath);
    const normalizedRequestPath = cleanPath(path);
    
    if (DEBUG) {
      console.log('----- V√©rification d\'acc√®s d√©taill√©e -----');
      console.log('Chemin original dans token:', overlayPath);
      console.log('Chemin original demand√©:', path);
      console.log('Chemin token normalis√©:', normalizedTokenPath);
      console.log('Chemin demand√© normalis√©:', normalizedRequestPath);
      console.log('Environnement de production:', isProduction);
    }
    
    // CORRECTION: V√©rifications am√©lior√©es pour correspondance de chemin
    
    // 1. Correspondance exacte des chemins normalis√©s
    if (normalizedTokenPath === normalizedRequestPath) {
      if (DEBUG) console.log('‚úÖ Correspondance exacte des chemins normalis√©s');
      return true;
    }
    
    // 2. Extraire le nom de l'overlay et le type
    const getOverlayInfo = (p) => {
      const parts = p.split('/');
      // Trouver "overlays" dans le chemin
      const overlaysIndex = parts.indexOf('overlays');
      if (overlaysIndex === -1) return null;
      
      return {
        type: parts[overlaysIndex + 1] || null,
        filename: parts[parts.length - 1] || null
      };
    };
    
    const tokenInfo = getOverlayInfo(normalizedTokenPath);
    const requestInfo = getOverlayInfo(normalizedRequestPath);
    
    if (tokenInfo && requestInfo) {
      if (DEBUG) {
        console.log('Info token:', tokenInfo);
        console.log('Info requ√™te:', requestInfo);
      }
      
      // 3. M√™me type d'overlay
      if (tokenInfo.type && requestInfo.type && tokenInfo.type === requestInfo.type) {
        if (DEBUG) console.log('‚úÖ M√™me type d\'overlay');
        return true;
      }
    }
    
    // 4. NOUVEAU: Correspondance de sous-cha√Æne plus intelligente
    if (normalizedRequestPath.includes(normalizedTokenPath) || normalizedTokenPath.includes(normalizedRequestPath)) {
      if (DEBUG) console.log('‚úÖ L\'un des chemins contient l\'autre');
      return true;
    }
    
    // 5. NOUVEAU: V√©rifier si les deux chemins pointent vers le m√™me fichier
    const tokenFile = normalizedTokenPath.split('/').pop();
    const requestFile = normalizedRequestPath.split('/').pop();
    if (tokenFile && requestFile && tokenFile === requestFile) {
      if (DEBUG) console.log('‚úÖ M√™me nom de fichier');
      return true;
    }
    
    // 6. Autoriser l'acc√®s en mode test (pour simplifier le d√©veloppement)
    if (params.get('test') === '1') {
      console.log('‚úÖ Mode test activ√©, acc√®s autoris√©');
      return true;
    }
    
    if (DEBUG) console.log('‚ùå Acc√®s refus√©: aucun crit√®re de correspondance trouv√©');
    return false;
  } catch (error) {
    console.error("Erreur de validation du token:", error);
    return false;
  }
}

/**
 * V√©rifie l'acc√®s aux overlays
 * @param {string} path - Le chemin d'acc√®s √† l'overlay
 * @returns {boolean} true si l'acc√®s est autoris√©
 */
export function checkOverlayAccess(path) {
  // Param√®tres d'URL pour le d√©bogage
  const params = new URLSearchParams(window.location.search);
  const DEBUG = params.get('debug') === '1';
  const accessToken = params.get('access_token');
  
  if (DEBUG) {
    console.log('V√©rification d\'acc√®s pour:', path);
    console.log('Token pr√©sent:', accessToken ? 'Oui' : 'Non');
    console.log('URL compl√®te:', window.location.href);
  }
  
  // NOUVEAU: Autorisation facile pour le d√©veloppement local
  const isDevelopment = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1';
                       
  // 1. Mode d√©veloppement local - autoriser l'acc√®s sans token pour le d√©bogage local
  if ((DEBUG || params.get('force') === '1') && isDevelopment) {
    console.log('Mode d√©veloppement local avec debug, acc√®s autoris√©');
    return true;
  }
  
  // 2. Mode test - pour faciliter le test des overlays
  if (params.get('test') === '1') {
    // En d√©veloppement, toujours autoriser
    if (isDevelopment) {
      console.log('Mode test en d√©veloppement, acc√®s autoris√©');
      return true;
    }
    
    // En production, autoriser uniquement sur certains domaines
    const allowedTestDomains = [
      'github.io',
      'netlify.app',
      'vercel.app'
    ];
    
    const domainAllowed = allowedTestDomains.some(domain => 
      window.location.hostname.includes(domain)
    );
    
    if (domainAllowed) {
      console.log('Mode test sur domaine de d√©ploiement, acc√®s autoris√©');
      return true;
    }
  }
  
  // 3. Autorisation forc√©e pour tous les domaines
  if (params.get('force') === '1' && params.get('admin') === 'true') {
    console.log('Mode force + admin, acc√®s autoris√©');
    return true;
  }
  
  // 4. Validation standard par token
  return validateOverlayToken(accessToken, path);
}

/**
 * Redirige vers la page d'authentification
 */
export function redirectToAuth() {
  window.location.href = '/src/auth.html';
}

/**
 * Affiche un message d'erreur d'acc√®s
 * @param {string} container - S√©lecteur pour le conteneur o√π afficher l'erreur
 * @param {string} title - Titre de l'erreur
 * @param {string} message - Message d√©taill√© de l'erreur
 */
export function showAccessDenied(container, title = "Acc√®s refus√©", message = "Vous n'√™tes pas autoris√© √† acc√©der √† cette ressource.") {
  const element = document.querySelector(container);
  if (!element) return;
  
  const params = new URLSearchParams(window.location.search);
  const DEBUG = params.get('debug') === '1';
  
  let debugInfo = '';
  if (DEBUG) {
    debugInfo = `
      <div class="debug-info" style="margin-top:20px; font-size:12px; background:rgba(0,0,0,0.5); padding:10px;">
        <strong>Info d√©bogage:</strong><br>
        Chemin demand√©: ${window.location.pathname}<br>
        Param√®tres: ${window.location.search}<br>
        Token pr√©sent: ${params.get('access_token') ? 'Oui' : 'Non'}<br>
        Hostname: ${window.location.hostname}<br>
        URL compl√®te: ${window.location.href}<br>
      </div>
      <div style="margin-top: 10px">
        <button onclick="window.location.search += '&test=1'">Mode test</button>
        <button onclick="window.location.reload()">R√©essayer</button>
      </div>
    `;
  } else {
    // M√™me pour le mode non-debug, ajouter des boutons utiles
    debugInfo = `
      <div style="margin-top: 20px">
        <button onclick="window.location.href=window.location.href+'&debug=1'">Activer le d√©bogage</button>
        <button onclick="window.location.href=window.location.href+'&test=1'">Mode test</button>
        <button onclick="window.location.reload()">R√©essayer</button>
      </div>
    `;
  }
  
  element.innerHTML = `
    <div class="error-container">
      <div class="error-icon">üîí</div>
      <div class="error-message">${title}</div>
      <div class="error-details">${message}</div>
      ${debugInfo}
    </div>
  `;
}
